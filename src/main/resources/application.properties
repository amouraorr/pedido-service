# Configuracao do banco de dados
spring.datasource.url=jdbc:postgresql://postgres:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.open-in-view=false
spring.jpa.show-sql=true

# Configuracao de logging
logging.level.com.fiap=DEBUG
logging.level.org.springframework=INFO
logging.level.org.springframework.security=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# /api-docs endpoint custom path
springdoc.api-docs.path=/api-doc

# Configuracao de Kafka
spring.kafka.bootstrap-servers=kafka:9092

# Configuracao de trusted packages para deserializacao segura no Kafka
spring.kafka.consumer.properties.spring.json.trusted.packages=java.util,java.lang,com.fiap.pedido.dto.request,com.fiap.pedido.dto.request.*,com.fiap.receiver.domain

# (Recomendado) ErrorHandlingDeserializer para tratamento resiliente de erros de serializacao
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer

# (Opcional) Configuracao do grupo do consumidor Kafka
spring.kafka.consumer.group-id=pedido-service-group

# (Opcional) Configuracao de auto offset reset
spring.kafka.consumer.auto-offset-reset=earliest

# URLs dos servicos REST
# Configuracao do servico de pagamento
pagamento.service.url=pagamento-service:8080

# Configuracao do servico de estoque
estoque.service.url=http://estoque-service:8080

# Configuracao do servico de produto
produto.service.url=http://produto-service:8080

# Configuracao do servico de cliente
cliente.service.url=http://cliente-service:8080
